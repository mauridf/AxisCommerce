// <auto-generated />
using System;
using AxisCommerce.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AxisCommerce.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241118193015_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Autenticacao.Usuario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SenhaHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Tipo")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Caixa.CaixaControle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DataHoraAbertura")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DataHoraFechamento")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("GerenteId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OperadorCaixaId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TerminalId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TerminalId1")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("VendedorId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("GerenteId");

                    b.HasIndex("OperadorCaixaId");

                    b.HasIndex("TerminalId");

                    b.HasIndex("TerminalId1");

                    b.HasIndex("VendedorId");

                    b.ToTable("CaixasControle");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Caixa.CaixaFechamento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CaixaControleId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CaixaControleId1")
                        .HasColumnType("uuid");

                    b.Property<string>("Justificativa")
                        .HasColumnType("text");

                    b.Property<double>("ValorFechamentoCaixa")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("CaixaControleId");

                    b.HasIndex("CaixaControleId1");

                    b.ToTable("CaixasFechamento");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Caixa.CaixaLancamento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CaixaControleId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CaixaControleId1")
                        .HasColumnType("uuid");

                    b.Property<bool>("Cancelado")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("DataHoraCancelado")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataHoraLancamento")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("TipoLancamentoId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TipoLancamentoId1")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TipoPagamentoId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TipoPagamentoId1")
                        .HasColumnType("uuid");

                    b.Property<double?>("Valor")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("CaixaControleId");

                    b.HasIndex("CaixaControleId1");

                    b.HasIndex("TipoLancamentoId");

                    b.HasIndex("TipoLancamentoId1");

                    b.HasIndex("TipoPagamentoId");

                    b.HasIndex("TipoPagamentoId1");

                    b.ToTable("CaixasLancamento");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Caixa.CaixaRecebimento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CaixaLancamentoId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CaixaLancamentoId1")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GerenteId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MoedaIndicadorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("MoedaIndicadorId1")
                        .HasColumnType("uuid");

                    b.Property<double>("ValorDesconto")
                        .HasColumnType("double precision");

                    b.Property<double>("ValorEncargo")
                        .HasColumnType("double precision");

                    b.Property<double>("ValorOriginal")
                        .HasColumnType("double precision");

                    b.Property<double>("ValorTotal")
                        .HasColumnType("double precision");

                    b.Property<Guid?>("VendedorId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CaixaLancamentoId");

                    b.HasIndex("CaixaLancamentoId1");

                    b.HasIndex("GerenteId");

                    b.HasIndex("MoedaIndicadorId");

                    b.HasIndex("MoedaIndicadorId1");

                    b.HasIndex("VendedorId");

                    b.ToTable("CaixasRecebimento");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Caixa.CaixaRecebimentoPgto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AdmCartaoId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AdminCartaoId")
                        .HasColumnType("uuid");

                    b.Property<string>("Agencia")
                        .HasColumnType("text");

                    b.Property<string>("Banco")
                        .HasColumnType("text");

                    b.Property<Guid>("CaixaRecebimentoId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CaixaRecebimentoId1")
                        .HasColumnType("uuid");

                    b.Property<string>("ChequeCartao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ChequeDigito")
                        .HasColumnType("text");

                    b.Property<string>("ContaCorrente")
                        .HasColumnType("text");

                    b.Property<double>("Cotacao")
                        .HasColumnType("double precision");

                    b.Property<DateOnly>("DataVencimento")
                        .HasColumnType("date");

                    b.Property<Guid>("MoedaIndicadorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("MoedaIndicadorId1")
                        .HasColumnType("uuid");

                    b.Property<string>("NumeroTitulo")
                        .HasColumnType("text");

                    b.Property<int>("ParcelasCartao")
                        .HasColumnType("integer");

                    b.Property<Guid>("TipoPagamentoId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TipoPagamentoId1")
                        .HasColumnType("uuid");

                    b.Property<double>("Troco")
                        .HasColumnType("double precision");

                    b.Property<double>("ValorMoeda")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("AdmCartaoId");

                    b.HasIndex("AdminCartaoId");

                    b.HasIndex("CaixaRecebimentoId");

                    b.HasIndex("CaixaRecebimentoId1");

                    b.HasIndex("MoedaIndicadorId");

                    b.HasIndex("MoedaIndicadorId1");

                    b.HasIndex("TipoPagamentoId");

                    b.HasIndex("TipoPagamentoId1");

                    b.ToTable("CaixasRecebimentoPgto");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Caixa.TipoLancamento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("DescNaoFiscal")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DescTipoLancamento")
                        .HasColumnType("text");

                    b.Property<bool>("Inativo")
                        .HasColumnType("boolean");

                    b.Property<bool>("IndicaSaida")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("TiposLancamento");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Clientes.Cliente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CEPCliente")
                        .HasColumnType("text");

                    b.Property<string>("CNPJCliente")
                        .HasColumnType("text");

                    b.Property<string>("CPFCliente")
                        .HasColumnType("text");

                    b.Property<Guid?>("ClienteClassificacaoId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ClienteClassificacaoId1")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ClienteEscolaridadeId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ClienteEscolaridadeId1")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ClienteFaixaRendaId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ClienteFaixaRendaId1")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ClienteProfissaoId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ClienteProfissaoId1")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ClienteSubTipoId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ClienteSubTipoId1")
                        .HasColumnType("uuid");

                    b.Property<string>("EmailCliente")
                        .HasColumnType("text");

                    b.Property<string>("EnderecoCliente")
                        .HasColumnType("text");

                    b.Property<string>("NomeCliente")
                        .HasColumnType("text");

                    b.Property<string>("TelefoneCliente")
                        .HasColumnType("text");

                    b.Property<string>("UFCliente")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ClienteClassificacaoId");

                    b.HasIndex("ClienteClassificacaoId1");

                    b.HasIndex("ClienteEscolaridadeId");

                    b.HasIndex("ClienteEscolaridadeId1");

                    b.HasIndex("ClienteFaixaRendaId");

                    b.HasIndex("ClienteFaixaRendaId1");

                    b.HasIndex("ClienteProfissaoId");

                    b.HasIndex("ClienteProfissaoId1");

                    b.HasIndex("ClienteSubTipoId");

                    b.HasIndex("ClienteSubTipoId1");

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Clientes.ClienteClassificacao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("DescClienteClassificacao")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ClientesClassificacoe");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Clientes.ClienteEscolaridade", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("DescEscolaridade")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ClientesEscolaridade");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Clientes.ClienteFaixaRenda", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("DescClienteFaixaRenda")
                        .HasColumnType("text");

                    b.Property<string>("ValorAte")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ValorDe")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ClientesFaixaRenda");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Clientes.ClienteProfissao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("DescClienteProfissao")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ClientesProfissoes");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Clientes.ClienteSubTipo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClienteTipoId")
                        .HasColumnType("uuid");

                    b.Property<string>("DescClienteSubTipo")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ClienteTipoId");

                    b.ToTable("ClientesSubTipos");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Clientes.ClienteTipo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("DescTipoCliente")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ClientesTipos");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Loja.Fornecedor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Bairro")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CEP")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CNPJ")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Complemento")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DDD")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Logradouro")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Municipio")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NomeFantasia")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Pais")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RazaoSocial")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UF")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Fornecedores");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Loja.LojaControle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("GerenteLojaId")
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("LojaDataControle")
                        .HasColumnType("date");

                    b.Property<Guid>("LojaId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LojasId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("GerenteLojaId");

                    b.HasIndex("LojaId");

                    b.HasIndex("LojasId");

                    b.ToTable("LojasControle");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Loja.LojaHorario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("DiaFuncionamento")
                        .HasColumnType("integer");

                    b.Property<TimeOnly?>("HoraFim")
                        .HasColumnType("time without time zone");

                    b.Property<TimeOnly>("HoraInicio")
                        .HasColumnType("time without time zone");

                    b.Property<Guid>("LojaId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("LojaId");

                    b.ToTable("LojasHorario");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Loja.Lojas", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Bairro")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CEP")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CNPJ_CPF")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CodLoja")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Complemento")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DDD")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly>("DataAbertura")
                        .HasColumnType("date");

                    b.Property<DateOnly>("DataFechamento")
                        .HasColumnType("date");

                    b.Property<string>("DescLoja")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Inativo")
                        .HasColumnType("boolean");

                    b.Property<int>("IndicaPessoaJuridicaFisica")
                        .HasColumnType("integer");

                    b.Property<string>("InscEstadual")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("InscMunicipal")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("InscSuframa")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Logradouro")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NomeFantasia")
                        .HasColumnType("text");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Pais")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RazaoSocial")
                        .HasColumnType("text");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TipoLogradouro")
                        .HasColumnType("integer");

                    b.Property<string>("UF")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Lojas");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Loja.Terminal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CodTerminal")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DataHoraLogin")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DataHoraLogout")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DescTerminal")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("LojaId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LojasId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("LojaId");

                    b.HasIndex("LojasId");

                    b.ToTable("Terminal");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Loja.Transportadora", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Bairro")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CEP")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CNPJ")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Complemento")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DDD")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Logradouro")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Municipio")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NomeFantasia")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Pais")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RazaoSocial")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UF")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Transportadoras");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Loja.Vendedor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Apelido")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CodVendedor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DataAtivacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DataDesativacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly>("DataNascimento")
                        .HasColumnType("date");

                    b.Property<bool>("Inativo")
                        .HasColumnType("boolean");

                    b.Property<bool>("IndicaGerente")
                        .HasColumnType("boolean");

                    b.Property<bool>("IndicaOperadorCaixa")
                        .HasColumnType("boolean");

                    b.Property<string>("LoginVendedor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("LojaId")
                        .HasColumnType("uuid");

                    b.Property<string>("NomeVendedor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SenhaVendedor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LojaId");

                    b.ToTable("Vendedores", t =>
                        {
                            t.HasCheckConstraint("CK_Vendedor_Gerente", "[IndicaGerente] IN (0, 1)");

                            t.HasCheckConstraint("CK_Vendedor_OperadorCaixa", "[IndicaOperadorCaixa] IN (0, 1)");
                        });
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Pagamento.AdminCartao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CredenciadoraCartaoId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CredenciadoraCartaoId1")
                        .HasColumnType("uuid");

                    b.Property<string>("DescAdminCartao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DiasPrimeiraParcela")
                        .HasColumnType("integer");

                    b.Property<bool>("Inativo")
                        .HasColumnType("boolean");

                    b.Property<bool>("IndicaCarteiraDigital")
                        .HasColumnType("boolean");

                    b.Property<int>("ParcelaJurosAdminCartao")
                        .HasColumnType("integer");

                    b.Property<int>("ParcelaJurosLoja")
                        .HasColumnType("integer");

                    b.Property<double>("TaxaJurosParcelamento")
                        .HasColumnType("double precision");

                    b.Property<string>("TipoCartao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CredenciadoraCartaoId");

                    b.HasIndex("CredenciadoraCartaoId1");

                    b.ToTable("AdminsCartao");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Pagamento.CondicaoPagto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AdminCartaoId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AdminCartaoId1")
                        .HasColumnType("uuid");

                    b.Property<string>("CodCondicaoPgto")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly>("DataAtivar")
                        .HasColumnType("date");

                    b.Property<DateOnly>("DataCriacao")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("DataDesativar")
                        .HasColumnType("date");

                    b.Property<string>("DescCondicaoPgto")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DiaVencimentoFixo")
                        .HasColumnType("integer");

                    b.Property<int>("DiasEntreParcelas")
                        .HasColumnType("integer");

                    b.Property<int>("DiasVencimento")
                        .HasColumnType("integer");

                    b.Property<int>("ParcelasMaximas")
                        .HasColumnType("integer");

                    b.Property<int>("ParcelasMinimas")
                        .HasColumnType("integer");

                    b.Property<int>("ParcelasSugestao")
                        .HasColumnType("integer");

                    b.Property<int>("PorcentagemDescontoTotal")
                        .HasColumnType("integer");

                    b.Property<Guid?>("TipoPagamentoId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TipoPagtoId")
                        .HasColumnType("uuid");

                    b.Property<int>("ToleranciaPorcentagem")
                        .HasColumnType("integer");

                    b.Property<int>("ToleranciaVencimento")
                        .HasColumnType("integer");

                    b.Property<double>("ValorMaximo")
                        .HasColumnType("double precision");

                    b.Property<double>("ValorMinimo")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("AdminCartaoId");

                    b.HasIndex("AdminCartaoId1");

                    b.HasIndex("TipoPagamentoId");

                    b.HasIndex("TipoPagtoId");

                    b.ToTable("CondicoesPgto");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Pagamento.CondicaoPagtoParcela", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AdminCartaoId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AdminCartaoId1")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CondicaoPagtoId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CondicaoPgtoId")
                        .HasColumnType("uuid");

                    b.Property<int>("DiasDaData")
                        .HasColumnType("integer");

                    b.Property<int>("Parcela")
                        .HasColumnType("integer");

                    b.Property<int>("Porcentagem")
                        .HasColumnType("integer");

                    b.Property<Guid?>("TipoPagamentoId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TipoPagtoId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AdminCartaoId");

                    b.HasIndex("AdminCartaoId1");

                    b.HasIndex("CondicaoPagtoId");

                    b.HasIndex("CondicaoPgtoId");

                    b.HasIndex("TipoPagamentoId");

                    b.HasIndex("TipoPagtoId");

                    b.ToTable("CondicoesPagtoParcela");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Pagamento.CredenciadoraCartao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CNPJ")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CodCredenciadoraCartao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RazaoSocial")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CredenciadorasCartao");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Pagamento.MoedaIndicador", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("NomeMoeda")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NomeMoedaFracao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NomeMoedaFracaoPlural")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NomeMoedaPlural")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SiglaMoedaIndicador")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("ValorConversao")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("MoedasIndicador");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Pagamento.ProgramaFidelidade", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("DescProgramaFidelidade")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly>("PontuacaoDataFinal")
                        .HasColumnType("date");

                    b.Property<DateOnly>("PontuacaoDataInicio")
                        .HasColumnType("date");

                    b.Property<string>("PontuacaoFormula")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PontuacaoRecibo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly>("ResgateDataFinal")
                        .HasColumnType("date");

                    b.Property<DateOnly>("ResgateDataInicio")
                        .HasColumnType("date");

                    b.Property<string>("ResgateFormula")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ResgateRecibo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ResgateSaldoMinimo")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("ProgramasFidelidade");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Pagamento.TipoPagamento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("DescTipoPagto")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DiasEntreParcelas")
                        .HasColumnType("integer");

                    b.Property<int>("DiasVencimento")
                        .HasColumnType("integer");

                    b.Property<bool>("Inativo")
                        .HasColumnType("boolean");

                    b.Property<int>("ParcelasMaximo")
                        .HasColumnType("integer");

                    b.Property<int>("ParcelasMinimo")
                        .HasColumnType("integer");

                    b.Property<int>("ParcelasSugestao")
                        .HasColumnType("integer");

                    b.Property<bool>("PermiteDevolucao")
                        .HasColumnType("boolean");

                    b.Property<bool>("PossuiTEF")
                        .HasColumnType("boolean");

                    b.Property<string>("SiglaTipoPagto")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("TipoAVista")
                        .HasColumnType("boolean");

                    b.Property<int>("ToleranciaPorcentagem")
                        .HasColumnType("integer");

                    b.Property<int>("ToleranciaVencimento")
                        .HasColumnType("integer");

                    b.Property<double>("ValorMaximo")
                        .HasColumnType("double precision");

                    b.Property<double>("ValorMinimo")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("TiposPagamento");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Pedidos.MotivoCancelamento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("DescMotivoCancelamento")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Inativo")
                        .HasColumnType("boolean");

                    b.Property<bool>("IndicaCancelamentoItem")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("MotivosCancelamento");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Pedidos.MotivoDesconto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("DescMotivoDesconto")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Inativo")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("MotivosDesconto");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Pedidos.MotivoDevolucao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("AprovacaoGerente")
                        .HasColumnType("boolean");

                    b.Property<string>("DescMotivoDevolucao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Inativo")
                        .HasColumnType("boolean");

                    b.Property<bool>("IndicaDevoculaoItem")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("MotivosDevolucao");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Pedidos.Pedido", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClienteId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ClienteId1")
                        .HasColumnType("uuid");

                    b.Property<string>("CodLoja")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("DataHoraFimPedido")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly>("DataPedido")
                        .HasColumnType("date");

                    b.Property<int>("FidelidadePontosUtilizados")
                        .HasColumnType("integer");

                    b.Property<TimeOnly>("HoraInicioPedido")
                        .HasColumnType("time without time zone");

                    b.Property<string>("IdentificacaoPedido")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IndicaFidelidade")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LojaId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LojasId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MotivoCancelamentoId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("MotivoCancelamentoId1")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MotivoDescontoId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("MotivoDescontoId1")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MotivoDevolucaoId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("MotivoDevolucaoId1")
                        .HasColumnType("uuid");

                    b.Property<string>("NumeroPedido")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OrigemPedido")
                        .HasColumnType("integer");

                    b.Property<int>("QtddTotal")
                        .HasColumnType("integer");

                    b.Property<int>("StatusPedido")
                        .HasColumnType("integer");

                    b.Property<int>("TipoEntrega")
                        .HasColumnType("integer");

                    b.Property<Guid>("TipoPedidoId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TipoPedidoId1")
                        .HasColumnType("uuid");

                    b.Property<double>("ValorDesconto")
                        .HasColumnType("double precision");

                    b.Property<double>("ValorTotalBruto")
                        .HasColumnType("double precision");

                    b.Property<double>("ValorTotalLiquido")
                        .HasColumnType("double precision");

                    b.Property<string>("VoucherPromocional")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("ClienteId1");

                    b.HasIndex("LojaId");

                    b.HasIndex("LojasId");

                    b.HasIndex("MotivoCancelamentoId");

                    b.HasIndex("MotivoCancelamentoId1");

                    b.HasIndex("MotivoDescontoId");

                    b.HasIndex("MotivoDescontoId1");

                    b.HasIndex("MotivoDevolucaoId");

                    b.HasIndex("MotivoDevolucaoId1");

                    b.HasIndex("TipoPedidoId");

                    b.HasIndex("TipoPedidoId1");

                    b.ToTable("Pedidos");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Pedidos.PedidoDesconto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CupomDesconto")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Mensagem")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("MotivoDescontoId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("MotivoDescontoId1")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PedidoId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PedidoId1")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PedidoItemId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PedidoItemId1")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PedidoPagtoId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PedidoPgtoId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PedidoPromocaoId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PedidoPromocaoId1")
                        .HasColumnType("uuid");

                    b.Property<double>("ValorAcrescimo")
                        .HasColumnType("double precision");

                    b.Property<double>("ValorDesconto")
                        .HasColumnType("double precision");

                    b.Property<Guid>("VendedorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("VendedorId1")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MotivoDescontoId");

                    b.HasIndex("MotivoDescontoId1");

                    b.HasIndex("PedidoId");

                    b.HasIndex("PedidoId1");

                    b.HasIndex("PedidoItemId");

                    b.HasIndex("PedidoItemId1");

                    b.HasIndex("PedidoPagtoId");

                    b.HasIndex("PedidoPgtoId");

                    b.HasIndex("PedidoPromocaoId");

                    b.HasIndex("PedidoPromocaoId1");

                    b.HasIndex("VendedorId");

                    b.HasIndex("VendedorId1");

                    b.ToTable("PedidosDesconto");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Pedidos.PedidoEntrega", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("DescontoFrete")
                        .HasColumnType("double precision");

                    b.Property<string>("EnderecoCobranca")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EnderecoEntrega")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MensagemCartao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ObsEntrega")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OpcaoEntrega")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("PedidoId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PedidoId1")
                        .HasColumnType("uuid");

                    b.Property<string>("PeriodoEntrega")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Peso")
                        .HasColumnType("integer");

                    b.Property<int>("SeqEntrega")
                        .HasColumnType("integer");

                    b.Property<double>("TaxaManuseio")
                        .HasColumnType("double precision");

                    b.Property<Guid>("TransportadoraId")
                        .HasColumnType("uuid");

                    b.Property<double>("ValorFrete")
                        .HasColumnType("double precision");

                    b.Property<double>("ValorSeguro")
                        .HasColumnType("double precision");

                    b.Property<int>("Volume")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PedidoId");

                    b.HasIndex("PedidoId1");

                    b.HasIndex("TransportadoraId");

                    b.ToTable("PedidosEntregas");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Pedidos.PedidoItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("DescontoItem")
                        .HasColumnType("integer");

                    b.Property<Guid>("EstoqueId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("EstoqueId1")
                        .HasColumnType("uuid");

                    b.Property<bool>("IndicaBrinde")
                        .HasColumnType("boolean");

                    b.Property<bool>("IndicaEmbrulhaPresente")
                        .HasColumnType("boolean");

                    b.Property<bool>("ItemCancelado")
                        .HasColumnType("boolean");

                    b.Property<Guid>("MotivoCancelamentoId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("MotivoCancelamentoId1")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MotivoDescontoId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("MotivoDescontoId1")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MotivoDevolucaoId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("MotivoDevolucaoId1")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PedidoId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PedidoId1")
                        .HasColumnType("uuid");

                    b.Property<double>("PrecoBrutoItem")
                        .HasColumnType("double precision");

                    b.Property<double>("PrecoLiquidoItem")
                        .HasColumnType("double precision");

                    b.Property<Guid>("ProdutoCodigoBarraId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProdutoCodigoBarraId1")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProdutoId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProdutoId1")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProdutoPrecoId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProdutoPrecoId1")
                        .HasColumnType("uuid");

                    b.Property<string>("QRCode")
                        .HasColumnType("text");

                    b.Property<int>("QtddItem")
                        .HasColumnType("integer");

                    b.Property<int>("SeqItem")
                        .HasColumnType("integer");

                    b.Property<int>("SeqKit")
                        .HasColumnType("integer");

                    b.Property<double>("TaxaManuseiro")
                        .HasColumnType("double precision");

                    b.Property<string>("URLSite")
                        .HasColumnType("text");

                    b.Property<string>("UrlImagem")
                        .HasColumnType("text");

                    b.Property<double>("ValorFrete")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("EstoqueId");

                    b.HasIndex("EstoqueId1");

                    b.HasIndex("MotivoCancelamentoId");

                    b.HasIndex("MotivoCancelamentoId1");

                    b.HasIndex("MotivoDescontoId");

                    b.HasIndex("MotivoDescontoId1");

                    b.HasIndex("MotivoDevolucaoId");

                    b.HasIndex("MotivoDevolucaoId1");

                    b.HasIndex("PedidoId");

                    b.HasIndex("PedidoId1");

                    b.HasIndex("ProdutoCodigoBarraId");

                    b.HasIndex("ProdutoCodigoBarraId1");

                    b.HasIndex("ProdutoId");

                    b.HasIndex("ProdutoId1");

                    b.HasIndex("ProdutoPrecoId");

                    b.HasIndex("ProdutoPrecoId1");

                    b.ToTable("PedidoItens");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Pedidos.PedidoPagto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AdminCartaoId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AdminCartaoId1")
                        .HasColumnType("uuid");

                    b.Property<string>("Agencia")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Banco")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BinCartao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CondicaoPagtoId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CondicaoPagtoId1")
                        .HasColumnType("uuid");

                    b.Property<string>("ContaCorrente")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("MoedaIndicadorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("MoedaIndicadorId1")
                        .HasColumnType("uuid");

                    b.Property<string>("NomeClienteCartao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Parcela")
                        .HasColumnType("integer");

                    b.Property<int>("ParcelasCartao")
                        .HasColumnType("integer");

                    b.Property<Guid>("PedidoId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PedidoId1")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TipoPagamentoId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TipoPagtoId")
                        .HasColumnType("uuid");

                    b.Property<double>("Troco")
                        .HasColumnType("double precision");

                    b.Property<string>("UltimosQuatroDigitosCartao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly>("ValidadeCartao")
                        .HasColumnType("date");

                    b.Property<double>("Valor")
                        .HasColumnType("double precision");

                    b.Property<DateOnly>("Vencimento")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("AdminCartaoId");

                    b.HasIndex("AdminCartaoId1");

                    b.HasIndex("CondicaoPagtoId");

                    b.HasIndex("CondicaoPagtoId1");

                    b.HasIndex("MoedaIndicadorId");

                    b.HasIndex("MoedaIndicadorId1");

                    b.HasIndex("PedidoId");

                    b.HasIndex("PedidoId1");

                    b.HasIndex("TipoPagamentoId");

                    b.HasIndex("TipoPagtoId");

                    b.ToTable("PedidosPgto");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Pedidos.PedidoPromocao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("PedidoId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PedidoId1")
                        .HasColumnType("uuid");

                    b.Property<double>("ValorDescontoEfetivo")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("PedidoId");

                    b.HasIndex("PedidoId1");

                    b.ToTable("PedidosPromocao");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Pedidos.PedidoVendedor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("PedidoId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PedidoId1")
                        .HasColumnType("uuid");

                    b.Property<Guid>("VendedorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("VendedorId1")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PedidoId");

                    b.HasIndex("PedidoId1");

                    b.HasIndex("VendedorId");

                    b.HasIndex("VendedorId1");

                    b.ToTable("PedidosVendedor");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Pedidos.TipoPedido", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("DescTipoPedido")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TiposPedido");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Produtos.ArtigoBrinde", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProdutoId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PromocaoTipoOfertaId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PromocaoTipoOfertaId1")
                        .HasColumnType("uuid");

                    b.Property<int>("QtdPecas")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProdutoId");

                    b.HasIndex("PromocaoTipoOfertaId");

                    b.HasIndex("PromocaoTipoOfertaId1");

                    b.ToTable("ArtigoBrinde");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Produtos.Deposito", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CodDeposito")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DesDeposito")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("LojaId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("LojaId");

                    b.ToTable("Deposito");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Produtos.Estoque", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("DataAtualizacaoEstoque")
                        .HasColumnType("date");

                    b.Property<Guid>("DepositoId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProdutoId")
                        .HasColumnType("uuid");

                    b.Property<int>("QtddEstoque")
                        .HasColumnType("integer");

                    b.Property<int>("QttdEstoqueLimiteMinino")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DepositoId");

                    b.HasIndex("ProdutoId");

                    b.ToTable("Estoque");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Produtos.Kit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("DescKit")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("PorcAbsorcaoDesconto")
                        .HasColumnType("double precision");

                    b.Property<int>("Qtdd")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Kit");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Produtos.Produto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CodProduto")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DescProduto")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("EstoqueLocalProduto")
                        .HasColumnType("integer");

                    b.Property<int>("EstoqueLocalProdutoLimiteMinimo")
                        .HasColumnType("integer");

                    b.Property<double>("PesoProduto")
                        .HasColumnType("double precision");

                    b.Property<Guid>("UnidadeMedidaId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UnidadeMedidaId");

                    b.ToTable("Produtos");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Produtos.ProdutoAtributo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CodAtributo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DescAtributo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DescAtributoResumido")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ProdutoAtributoDefinicaoId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProdutoAtributoDefinicaoId");

                    b.ToTable("ProdutoAtributos");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Produtos.ProdutoAtributoDefinicao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("DescAtributoDefinição")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DescResumidaAtributo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("IdSuperior")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("ProdutoAtributoDefinicoes");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Produtos.ProdutoCatalogo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("DataFinalCatalogo")
                        .HasColumnType("date");

                    b.Property<DateOnly>("DataInicialCatalogo")
                        .HasColumnType("date");

                    b.Property<bool>("IndicaLook")
                        .HasColumnType("boolean");

                    b.Property<string>("Observacao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ProdutoAtributoId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProdutoId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProdutoAtributoId");

                    b.HasIndex("ProdutoId");

                    b.ToTable("ProdutoCatalogo");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Produtos.ProdutoCodigoBarra", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CodigoBarra")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ProdutoId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProdutoId");

                    b.ToTable("ProdutoCodigoBarra");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Produtos.ProdutoCorBasica", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProdutoAtributoId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProdutoId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProdutoAtributoId");

                    b.HasIndex("ProdutoId");

                    b.ToTable("ProdutoCorBasica");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Produtos.ProdutoKit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("KitId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("KitId1")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProdutoId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("KitId");

                    b.HasIndex("KitId1");

                    b.HasIndex("ProdutoId");

                    b.ToTable("ProdutoKits");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Produtos.ProdutoLookComposicao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProdutoAtributoId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProdutoId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProdutoAtributoId");

                    b.HasIndex("ProdutoId");

                    b.ToTable("ProdutoLookComposicoes");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Produtos.ProdutoPreco", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateOnly?>("DataFimVigencia")
                        .HasColumnType("date");

                    b.Property<DateOnly>("DataInicioVigencia")
                        .HasColumnType("date");

                    b.Property<bool>("Inativo")
                        .HasColumnType("boolean");

                    b.Property<double>("LimiteDesconto")
                        .HasColumnType("double precision");

                    b.Property<double>("Preco")
                        .HasColumnType("double precision");

                    b.Property<Guid>("ProdutoId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProdutoId");

                    b.ToTable("ProdutoPrecos");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Produtos.ProdutoTributo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("DataInicioVigencia")
                        .HasColumnType("date");

                    b.Property<Guid>("ProdutoId")
                        .HasColumnType("uuid");

                    b.Property<double>("TaxaEstadual")
                        .HasColumnType("double precision");

                    b.Property<double>("TaxaFederal")
                        .HasColumnType("double precision");

                    b.Property<double>("TaxaMunicipal")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("ProdutoId");

                    b.ToTable("ProdutoTributos");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Produtos.UnidadeMedida", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("NomeUnidadeMedida")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NomeUnidadeMedidaPlural")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Simbolo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("UnidadesMedida");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Vendas.OperacaoVenda", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CodOperacaoVenda")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly>("DataAtivar")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("DataDesativar")
                        .HasColumnType("date");

                    b.Property<string>("DescNaturezaOperacao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DescOperacaoVenda")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("LimiteDesconto")
                        .HasColumnType("integer");

                    b.Property<int>("LimiteDescontoGerente")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("OperacoesVenda");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Vendas.OperacaoVendaCondicaoPgto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CondicaoPagtoId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CondicaoPgtoId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Inativo")
                        .HasColumnType("boolean");

                    b.Property<Guid>("OperacaoVendaId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OperacaoVendaId1")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CondicaoPagtoId");

                    b.HasIndex("CondicaoPgtoId");

                    b.HasIndex("OperacaoVendaId");

                    b.HasIndex("OperacaoVendaId1");

                    b.ToTable("OperacoesVendasCondicoesPagto");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Vendas.OperacaoVendaTipoCliente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClienteTipoId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ClienteTipoId1")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OperacaoVendaId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OperacaoVendaId1")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ClienteTipoId");

                    b.HasIndex("ClienteTipoId1");

                    b.HasIndex("OperacaoVendaId");

                    b.HasIndex("OperacaoVendaId1");

                    b.ToTable("OperacoesVendasTipoCliente");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Vendas.Promocao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("DataAtivar")
                        .HasColumnType("date");

                    b.Property<DateOnly>("DataCadastro")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("DataDesativar")
                        .HasColumnType("date");

                    b.Property<string>("DescPromocao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Inativo")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PromocaoGrupoId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PromocaoGrupoId1")
                        .HasColumnType("uuid");

                    b.Property<int>("QtddLimite")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("TipoOperacaoVendaId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TipoOperacaoVendaId1")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TipoPagamentoId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TipoPagamentoId1")
                        .HasColumnType("uuid");

                    b.Property<string>("URL")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PromocaoGrupoId");

                    b.HasIndex("PromocaoGrupoId1");

                    b.HasIndex("TipoOperacaoVendaId");

                    b.HasIndex("TipoOperacaoVendaId1");

                    b.HasIndex("TipoPagamentoId");

                    b.HasIndex("TipoPagamentoId1");

                    b.ToTable("Promocoes");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Vendas.PromocaoGrupo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("DescPromocaoGrupo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PromocoesGrupo");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Vendas.PromocaoTipoOferta", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("DescBeneficio")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DescRegra")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MsgInternet")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MsgOperador")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PorcentagemDesconto")
                        .HasColumnType("integer");

                    b.Property<Guid>("PromocaoId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PromocaoId1")
                        .HasColumnType("uuid");

                    b.Property<int>("QdtMinima")
                        .HasColumnType("integer");

                    b.Property<int>("QtdBrindCumpom")
                        .HasColumnType("integer");

                    b.Property<int>("QtdMaximaPorCliente")
                        .HasColumnType("integer");

                    b.Property<string>("TextoComprovante")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TipoOfertaId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TipoOfertaId1")
                        .HasColumnType("uuid");

                    b.Property<double>("ValorDesconto")
                        .HasColumnType("double precision");

                    b.Property<double>("ValorMinimo")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("PromocaoId");

                    b.HasIndex("PromocaoId1");

                    b.HasIndex("TipoOfertaId");

                    b.HasIndex("TipoOfertaId1");

                    b.ToTable("PromocaoTipoOferta");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Vendas.TipoOferta", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CodTipoOferta")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DescTipoOferta")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TiposOfertas");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Vendas.TipoOperacaoVenda", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("DescTipoOperacaoVenda")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TiposOperacoesVendas");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Caixa.CaixaControle", b =>
                {
                    b.HasOne("AxisCommerce.Domain.Entities.Loja.Vendedor", "Gerente")
                        .WithMany()
                        .HasForeignKey("GerenteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_CaixaControle_Gerente");

                    b.HasOne("AxisCommerce.Domain.Entities.Loja.Vendedor", "OperadorCaixa")
                        .WithMany()
                        .HasForeignKey("OperadorCaixaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_CaixaControle_OperadorCaixa");

                    b.HasOne("AxisCommerce.Domain.Entities.Loja.Terminal", "Terminal")
                        .WithMany()
                        .HasForeignKey("TerminalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AxisCommerce.Domain.Entities.Loja.Terminal", null)
                        .WithMany("CaixasControle")
                        .HasForeignKey("TerminalId1");

                    b.HasOne("AxisCommerce.Domain.Entities.Loja.Vendedor", null)
                        .WithMany("CaixasControle")
                        .HasForeignKey("VendedorId");

                    b.Navigation("Gerente");

                    b.Navigation("OperadorCaixa");

                    b.Navigation("Terminal");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Caixa.CaixaFechamento", b =>
                {
                    b.HasOne("AxisCommerce.Domain.Entities.Caixa.CaixaControle", "CaixaControle")
                        .WithMany()
                        .HasForeignKey("CaixaControleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AxisCommerce.Domain.Entities.Caixa.CaixaControle", null)
                        .WithMany("CaixasFechamento")
                        .HasForeignKey("CaixaControleId1");

                    b.Navigation("CaixaControle");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Caixa.CaixaLancamento", b =>
                {
                    b.HasOne("AxisCommerce.Domain.Entities.Caixa.CaixaControle", "CaixaControle")
                        .WithMany()
                        .HasForeignKey("CaixaControleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AxisCommerce.Domain.Entities.Caixa.CaixaControle", null)
                        .WithMany("CaixasLancamento")
                        .HasForeignKey("CaixaControleId1");

                    b.HasOne("AxisCommerce.Domain.Entities.Caixa.TipoLancamento", "TipoLancamento")
                        .WithMany()
                        .HasForeignKey("TipoLancamentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AxisCommerce.Domain.Entities.Caixa.TipoLancamento", null)
                        .WithMany("CaixasLancamento")
                        .HasForeignKey("TipoLancamentoId1");

                    b.HasOne("AxisCommerce.Domain.Entities.Pagamento.TipoPagamento", "TipoPagamento")
                        .WithMany()
                        .HasForeignKey("TipoPagamentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AxisCommerce.Domain.Entities.Pagamento.TipoPagamento", null)
                        .WithMany("CaixasLancamento")
                        .HasForeignKey("TipoPagamentoId1");

                    b.Navigation("CaixaControle");

                    b.Navigation("TipoLancamento");

                    b.Navigation("TipoPagamento");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Caixa.CaixaRecebimento", b =>
                {
                    b.HasOne("AxisCommerce.Domain.Entities.Caixa.CaixaLancamento", "CaixaLancamento")
                        .WithMany()
                        .HasForeignKey("CaixaLancamentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AxisCommerce.Domain.Entities.Caixa.CaixaLancamento", null)
                        .WithMany("CaixasRecebimento")
                        .HasForeignKey("CaixaLancamentoId1");

                    b.HasOne("AxisCommerce.Domain.Entities.Loja.Vendedor", "Gerente")
                        .WithMany()
                        .HasForeignKey("GerenteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AxisCommerce.Domain.Entities.Pagamento.MoedaIndicador", "MoedaIndicador")
                        .WithMany()
                        .HasForeignKey("MoedaIndicadorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AxisCommerce.Domain.Entities.Pagamento.MoedaIndicador", null)
                        .WithMany("CaixasRecebimento")
                        .HasForeignKey("MoedaIndicadorId1");

                    b.HasOne("AxisCommerce.Domain.Entities.Loja.Vendedor", null)
                        .WithMany("CaixasRecebimento")
                        .HasForeignKey("VendedorId");

                    b.Navigation("CaixaLancamento");

                    b.Navigation("Gerente");

                    b.Navigation("MoedaIndicador");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Caixa.CaixaRecebimentoPgto", b =>
                {
                    b.HasOne("AxisCommerce.Domain.Entities.Pagamento.AdminCartao", "AdminCartao")
                        .WithMany()
                        .HasForeignKey("AdmCartaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AxisCommerce.Domain.Entities.Pagamento.AdminCartao", null)
                        .WithMany("CaixasRecebimentoPgto")
                        .HasForeignKey("AdminCartaoId");

                    b.HasOne("AxisCommerce.Domain.Entities.Caixa.CaixaRecebimento", "CaixaRecebimento")
                        .WithMany()
                        .HasForeignKey("CaixaRecebimentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AxisCommerce.Domain.Entities.Caixa.CaixaRecebimento", null)
                        .WithMany("CaixasRecebimentoPgto")
                        .HasForeignKey("CaixaRecebimentoId1");

                    b.HasOne("AxisCommerce.Domain.Entities.Pagamento.MoedaIndicador", "MoedaIndicador")
                        .WithMany()
                        .HasForeignKey("MoedaIndicadorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AxisCommerce.Domain.Entities.Pagamento.MoedaIndicador", null)
                        .WithMany("CaixasRecebimentoPgto")
                        .HasForeignKey("MoedaIndicadorId1");

                    b.HasOne("AxisCommerce.Domain.Entities.Pagamento.TipoPagamento", "TipoPagamento")
                        .WithMany()
                        .HasForeignKey("TipoPagamentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AxisCommerce.Domain.Entities.Pagamento.TipoPagamento", null)
                        .WithMany("CaixasRecebimentoPgto")
                        .HasForeignKey("TipoPagamentoId1");

                    b.Navigation("AdminCartao");

                    b.Navigation("CaixaRecebimento");

                    b.Navigation("MoedaIndicador");

                    b.Navigation("TipoPagamento");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Clientes.Cliente", b =>
                {
                    b.HasOne("AxisCommerce.Domain.Entities.Clientes.ClienteClassificacao", "ClienteClassificacao")
                        .WithMany()
                        .HasForeignKey("ClienteClassificacaoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AxisCommerce.Domain.Entities.Clientes.ClienteClassificacao", null)
                        .WithMany("Clientes")
                        .HasForeignKey("ClienteClassificacaoId1");

                    b.HasOne("AxisCommerce.Domain.Entities.Clientes.ClienteEscolaridade", "ClienteEscolaridade")
                        .WithMany()
                        .HasForeignKey("ClienteEscolaridadeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AxisCommerce.Domain.Entities.Clientes.ClienteEscolaridade", null)
                        .WithMany("Clientes")
                        .HasForeignKey("ClienteEscolaridadeId1");

                    b.HasOne("AxisCommerce.Domain.Entities.Clientes.ClienteFaixaRenda", "ClienteFaixaRenda")
                        .WithMany()
                        .HasForeignKey("ClienteFaixaRendaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AxisCommerce.Domain.Entities.Clientes.ClienteFaixaRenda", null)
                        .WithMany("Clientes")
                        .HasForeignKey("ClienteFaixaRendaId1");

                    b.HasOne("AxisCommerce.Domain.Entities.Clientes.ClienteProfissao", "ClienteProfissao")
                        .WithMany()
                        .HasForeignKey("ClienteProfissaoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AxisCommerce.Domain.Entities.Clientes.ClienteProfissao", null)
                        .WithMany("Clientes")
                        .HasForeignKey("ClienteProfissaoId1");

                    b.HasOne("AxisCommerce.Domain.Entities.Clientes.ClienteSubTipo", "ClienteSubTipo")
                        .WithMany()
                        .HasForeignKey("ClienteSubTipoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AxisCommerce.Domain.Entities.Clientes.ClienteSubTipo", null)
                        .WithMany("Clientes")
                        .HasForeignKey("ClienteSubTipoId1");

                    b.Navigation("ClienteClassificacao");

                    b.Navigation("ClienteEscolaridade");

                    b.Navigation("ClienteFaixaRenda");

                    b.Navigation("ClienteProfissao");

                    b.Navigation("ClienteSubTipo");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Clientes.ClienteSubTipo", b =>
                {
                    b.HasOne("AxisCommerce.Domain.Entities.Clientes.ClienteTipo", "ClienteTipo")
                        .WithMany("ClienteSubTipos")
                        .HasForeignKey("ClienteTipoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClienteTipo");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Loja.LojaControle", b =>
                {
                    b.HasOne("AxisCommerce.Domain.Entities.Loja.Vendedor", "Vendedor")
                        .WithMany()
                        .HasForeignKey("GerenteLojaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AxisCommerce.Domain.Entities.Loja.Lojas", "Loja")
                        .WithMany()
                        .HasForeignKey("LojaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AxisCommerce.Domain.Entities.Loja.Lojas", null)
                        .WithMany("LojaControle")
                        .HasForeignKey("LojasId");

                    b.Navigation("Loja");

                    b.Navigation("Vendedor");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Loja.LojaHorario", b =>
                {
                    b.HasOne("AxisCommerce.Domain.Entities.Loja.Lojas", "Loja")
                        .WithMany()
                        .HasForeignKey("LojaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Loja");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Loja.Terminal", b =>
                {
                    b.HasOne("AxisCommerce.Domain.Entities.Loja.Lojas", "Loja")
                        .WithMany()
                        .HasForeignKey("LojaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AxisCommerce.Domain.Entities.Loja.Lojas", null)
                        .WithMany("Terminais")
                        .HasForeignKey("LojasId");

                    b.Navigation("Loja");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Loja.Vendedor", b =>
                {
                    b.HasOne("AxisCommerce.Domain.Entities.Loja.Lojas", "Loja")
                        .WithMany("Vendedores")
                        .HasForeignKey("LojaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Loja");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Pagamento.AdminCartao", b =>
                {
                    b.HasOne("AxisCommerce.Domain.Entities.Pagamento.CredenciadoraCartao", "CredenciadoraCartao")
                        .WithMany()
                        .HasForeignKey("CredenciadoraCartaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AxisCommerce.Domain.Entities.Pagamento.CredenciadoraCartao", null)
                        .WithMany("AdminsCartao")
                        .HasForeignKey("CredenciadoraCartaoId1");

                    b.Navigation("CredenciadoraCartao");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Pagamento.CondicaoPagto", b =>
                {
                    b.HasOne("AxisCommerce.Domain.Entities.Pagamento.AdminCartao", "AdminCartao")
                        .WithMany()
                        .HasForeignKey("AdminCartaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AxisCommerce.Domain.Entities.Pagamento.AdminCartao", null)
                        .WithMany("CondicaoPagtos")
                        .HasForeignKey("AdminCartaoId1");

                    b.HasOne("AxisCommerce.Domain.Entities.Pagamento.TipoPagamento", null)
                        .WithMany("CondicaoPagtos")
                        .HasForeignKey("TipoPagamentoId");

                    b.HasOne("AxisCommerce.Domain.Entities.Pagamento.TipoPagamento", "TipoPagamento")
                        .WithMany()
                        .HasForeignKey("TipoPagtoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdminCartao");

                    b.Navigation("TipoPagamento");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Pagamento.CondicaoPagtoParcela", b =>
                {
                    b.HasOne("AxisCommerce.Domain.Entities.Pagamento.AdminCartao", "AdminCartao")
                        .WithMany()
                        .HasForeignKey("AdminCartaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AxisCommerce.Domain.Entities.Pagamento.AdminCartao", null)
                        .WithMany("CondicaoPagtoParcelas")
                        .HasForeignKey("AdminCartaoId1");

                    b.HasOne("AxisCommerce.Domain.Entities.Pagamento.CondicaoPagto", null)
                        .WithMany("CondicaoPagtoParcelas")
                        .HasForeignKey("CondicaoPagtoId");

                    b.HasOne("AxisCommerce.Domain.Entities.Pagamento.CondicaoPagto", "CondicaoPgto")
                        .WithMany()
                        .HasForeignKey("CondicaoPgtoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AxisCommerce.Domain.Entities.Pagamento.TipoPagamento", null)
                        .WithMany("CondicaoPagtoParcelas")
                        .HasForeignKey("TipoPagamentoId");

                    b.HasOne("AxisCommerce.Domain.Entities.Pagamento.TipoPagamento", "TipoPagamento")
                        .WithMany()
                        .HasForeignKey("TipoPagtoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdminCartao");

                    b.Navigation("CondicaoPgto");

                    b.Navigation("TipoPagamento");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Pedidos.Pedido", b =>
                {
                    b.HasOne("AxisCommerce.Domain.Entities.Clientes.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AxisCommerce.Domain.Entities.Clientes.Cliente", null)
                        .WithMany("Pedidos")
                        .HasForeignKey("ClienteId1");

                    b.HasOne("AxisCommerce.Domain.Entities.Loja.Lojas", "Loja")
                        .WithMany()
                        .HasForeignKey("LojaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AxisCommerce.Domain.Entities.Loja.Lojas", null)
                        .WithMany("Pedidos")
                        .HasForeignKey("LojasId");

                    b.HasOne("AxisCommerce.Domain.Entities.Pedidos.MotivoCancelamento", "MotivoCancelamento")
                        .WithMany()
                        .HasForeignKey("MotivoCancelamentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AxisCommerce.Domain.Entities.Pedidos.MotivoCancelamento", null)
                        .WithMany("Pedidos")
                        .HasForeignKey("MotivoCancelamentoId1");

                    b.HasOne("AxisCommerce.Domain.Entities.Pedidos.MotivoDesconto", "MotivoDesconto")
                        .WithMany()
                        .HasForeignKey("MotivoDescontoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AxisCommerce.Domain.Entities.Pedidos.MotivoDesconto", null)
                        .WithMany("Pedidos")
                        .HasForeignKey("MotivoDescontoId1");

                    b.HasOne("AxisCommerce.Domain.Entities.Pedidos.MotivoDevolucao", "MotivoDevolucao")
                        .WithMany()
                        .HasForeignKey("MotivoDevolucaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AxisCommerce.Domain.Entities.Pedidos.MotivoDevolucao", null)
                        .WithMany("Pedidos")
                        .HasForeignKey("MotivoDevolucaoId1");

                    b.HasOne("AxisCommerce.Domain.Entities.Pedidos.TipoPedido", "TipoPedido")
                        .WithMany()
                        .HasForeignKey("TipoPedidoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AxisCommerce.Domain.Entities.Pedidos.TipoPedido", null)
                        .WithMany("Pedidos")
                        .HasForeignKey("TipoPedidoId1");

                    b.Navigation("Cliente");

                    b.Navigation("Loja");

                    b.Navigation("MotivoCancelamento");

                    b.Navigation("MotivoDesconto");

                    b.Navigation("MotivoDevolucao");

                    b.Navigation("TipoPedido");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Pedidos.PedidoDesconto", b =>
                {
                    b.HasOne("AxisCommerce.Domain.Entities.Pedidos.MotivoDesconto", "MotivoDesconto")
                        .WithMany()
                        .HasForeignKey("MotivoDescontoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AxisCommerce.Domain.Entities.Pedidos.MotivoDesconto", null)
                        .WithMany("PedidoDescontos")
                        .HasForeignKey("MotivoDescontoId1");

                    b.HasOne("AxisCommerce.Domain.Entities.Pedidos.Pedido", "Pedido")
                        .WithMany()
                        .HasForeignKey("PedidoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AxisCommerce.Domain.Entities.Pedidos.Pedido", null)
                        .WithMany("PedidoDescontos")
                        .HasForeignKey("PedidoId1");

                    b.HasOne("AxisCommerce.Domain.Entities.Pedidos.PedidoItem", "PedidoItem")
                        .WithMany()
                        .HasForeignKey("PedidoItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AxisCommerce.Domain.Entities.Pedidos.PedidoItem", null)
                        .WithMany("PedidoDescontos")
                        .HasForeignKey("PedidoItemId1");

                    b.HasOne("AxisCommerce.Domain.Entities.Pedidos.PedidoPagto", null)
                        .WithMany("PedidoDescontos")
                        .HasForeignKey("PedidoPagtoId");

                    b.HasOne("AxisCommerce.Domain.Entities.Pedidos.PedidoPagto", "PedidoPgto")
                        .WithMany()
                        .HasForeignKey("PedidoPgtoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AxisCommerce.Domain.Entities.Pedidos.PedidoPromocao", "PedidoPromocao")
                        .WithMany()
                        .HasForeignKey("PedidoPromocaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AxisCommerce.Domain.Entities.Pedidos.PedidoPromocao", null)
                        .WithMany("PedidoDescontos")
                        .HasForeignKey("PedidoPromocaoId1");

                    b.HasOne("AxisCommerce.Domain.Entities.Loja.Vendedor", "Vendedor")
                        .WithMany()
                        .HasForeignKey("VendedorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AxisCommerce.Domain.Entities.Loja.Vendedor", null)
                        .WithMany("PedidoDescontos")
                        .HasForeignKey("VendedorId1");

                    b.Navigation("MotivoDesconto");

                    b.Navigation("Pedido");

                    b.Navigation("PedidoItem");

                    b.Navigation("PedidoPgto");

                    b.Navigation("PedidoPromocao");

                    b.Navigation("Vendedor");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Pedidos.PedidoEntrega", b =>
                {
                    b.HasOne("AxisCommerce.Domain.Entities.Pedidos.Pedido", "Pedido")
                        .WithMany()
                        .HasForeignKey("PedidoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AxisCommerce.Domain.Entities.Pedidos.Pedido", null)
                        .WithMany("PedidoEntregas")
                        .HasForeignKey("PedidoId1");

                    b.HasOne("AxisCommerce.Domain.Entities.Loja.Transportadora", null)
                        .WithMany("PedidoEntregas")
                        .HasForeignKey("TransportadoraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pedido");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Pedidos.PedidoItem", b =>
                {
                    b.HasOne("AxisCommerce.Domain.Entities.Produtos.Estoque", "Estoque")
                        .WithMany()
                        .HasForeignKey("EstoqueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AxisCommerce.Domain.Entities.Produtos.Estoque", null)
                        .WithMany("PedidoItens")
                        .HasForeignKey("EstoqueId1");

                    b.HasOne("AxisCommerce.Domain.Entities.Pedidos.MotivoCancelamento", "MotivoCancelamento")
                        .WithMany()
                        .HasForeignKey("MotivoCancelamentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AxisCommerce.Domain.Entities.Pedidos.MotivoCancelamento", null)
                        .WithMany("PedidoItens")
                        .HasForeignKey("MotivoCancelamentoId1");

                    b.HasOne("AxisCommerce.Domain.Entities.Pedidos.MotivoDesconto", "MotivoDesconto")
                        .WithMany()
                        .HasForeignKey("MotivoDescontoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AxisCommerce.Domain.Entities.Pedidos.MotivoDesconto", null)
                        .WithMany("PedidoItens")
                        .HasForeignKey("MotivoDescontoId1");

                    b.HasOne("AxisCommerce.Domain.Entities.Pedidos.MotivoDevolucao", "MotivoDevolucao")
                        .WithMany()
                        .HasForeignKey("MotivoDevolucaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AxisCommerce.Domain.Entities.Pedidos.MotivoDevolucao", null)
                        .WithMany("PedidoItens")
                        .HasForeignKey("MotivoDevolucaoId1");

                    b.HasOne("AxisCommerce.Domain.Entities.Pedidos.Pedido", "Pedido")
                        .WithMany()
                        .HasForeignKey("PedidoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AxisCommerce.Domain.Entities.Pedidos.Pedido", null)
                        .WithMany("PedidoItens")
                        .HasForeignKey("PedidoId1");

                    b.HasOne("AxisCommerce.Domain.Entities.Produtos.ProdutoCodigoBarra", "ProdutoCodigoBarra")
                        .WithMany()
                        .HasForeignKey("ProdutoCodigoBarraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AxisCommerce.Domain.Entities.Produtos.ProdutoCodigoBarra", null)
                        .WithMany("PedidoItens")
                        .HasForeignKey("ProdutoCodigoBarraId1");

                    b.HasOne("AxisCommerce.Domain.Entities.Produtos.Produto", "Produto")
                        .WithMany()
                        .HasForeignKey("ProdutoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AxisCommerce.Domain.Entities.Produtos.Produto", null)
                        .WithMany("PedidoItens")
                        .HasForeignKey("ProdutoId1");

                    b.HasOne("AxisCommerce.Domain.Entities.Produtos.ProdutoPreco", "ProdutoPreco")
                        .WithMany()
                        .HasForeignKey("ProdutoPrecoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AxisCommerce.Domain.Entities.Produtos.ProdutoPreco", null)
                        .WithMany("PedidoItens")
                        .HasForeignKey("ProdutoPrecoId1");

                    b.Navigation("Estoque");

                    b.Navigation("MotivoCancelamento");

                    b.Navigation("MotivoDesconto");

                    b.Navigation("MotivoDevolucao");

                    b.Navigation("Pedido");

                    b.Navigation("Produto");

                    b.Navigation("ProdutoCodigoBarra");

                    b.Navigation("ProdutoPreco");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Pedidos.PedidoPagto", b =>
                {
                    b.HasOne("AxisCommerce.Domain.Entities.Pagamento.AdminCartao", "AdminCartao")
                        .WithMany()
                        .HasForeignKey("AdminCartaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AxisCommerce.Domain.Entities.Pagamento.AdminCartao", null)
                        .WithMany("PedidoPagos")
                        .HasForeignKey("AdminCartaoId1");

                    b.HasOne("AxisCommerce.Domain.Entities.Pagamento.CondicaoPagto", "CondicaoPagto")
                        .WithMany()
                        .HasForeignKey("CondicaoPagtoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AxisCommerce.Domain.Entities.Pagamento.CondicaoPagto", null)
                        .WithMany("PedidoPagos")
                        .HasForeignKey("CondicaoPagtoId1");

                    b.HasOne("AxisCommerce.Domain.Entities.Pagamento.MoedaIndicador", "MoedaIndicador")
                        .WithMany()
                        .HasForeignKey("MoedaIndicadorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AxisCommerce.Domain.Entities.Pagamento.MoedaIndicador", null)
                        .WithMany("PedidoPagos")
                        .HasForeignKey("MoedaIndicadorId1");

                    b.HasOne("AxisCommerce.Domain.Entities.Pedidos.Pedido", "Pedido")
                        .WithMany()
                        .HasForeignKey("PedidoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AxisCommerce.Domain.Entities.Pedidos.Pedido", null)
                        .WithMany("PedidoPagos")
                        .HasForeignKey("PedidoId1");

                    b.HasOne("AxisCommerce.Domain.Entities.Pagamento.TipoPagamento", null)
                        .WithMany("PedidoPagos")
                        .HasForeignKey("TipoPagamentoId");

                    b.HasOne("AxisCommerce.Domain.Entities.Pagamento.TipoPagamento", "TipoPagamento")
                        .WithMany()
                        .HasForeignKey("TipoPagtoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdminCartao");

                    b.Navigation("CondicaoPagto");

                    b.Navigation("MoedaIndicador");

                    b.Navigation("Pedido");

                    b.Navigation("TipoPagamento");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Pedidos.PedidoPromocao", b =>
                {
                    b.HasOne("AxisCommerce.Domain.Entities.Pedidos.Pedido", "Pedido")
                        .WithMany()
                        .HasForeignKey("PedidoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AxisCommerce.Domain.Entities.Pedidos.Pedido", null)
                        .WithMany("PedidoPromocoes")
                        .HasForeignKey("PedidoId1");

                    b.Navigation("Pedido");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Pedidos.PedidoVendedor", b =>
                {
                    b.HasOne("AxisCommerce.Domain.Entities.Pedidos.Pedido", "Pedido")
                        .WithMany()
                        .HasForeignKey("PedidoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AxisCommerce.Domain.Entities.Pedidos.Pedido", null)
                        .WithMany("PedidoVendedor")
                        .HasForeignKey("PedidoId1");

                    b.HasOne("AxisCommerce.Domain.Entities.Loja.Vendedor", "Vendedor")
                        .WithMany()
                        .HasForeignKey("VendedorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AxisCommerce.Domain.Entities.Loja.Vendedor", null)
                        .WithMany("PedidoVendedor")
                        .HasForeignKey("VendedorId1");

                    b.Navigation("Pedido");

                    b.Navigation("Vendedor");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Produtos.ArtigoBrinde", b =>
                {
                    b.HasOne("AxisCommerce.Domain.Entities.Produtos.Produto", "Produto")
                        .WithMany("ArtigoBrinde")
                        .HasForeignKey("ProdutoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AxisCommerce.Domain.Entities.Vendas.PromocaoTipoOferta", "PromocaoTipoOferta")
                        .WithMany()
                        .HasForeignKey("PromocaoTipoOfertaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AxisCommerce.Domain.Entities.Vendas.PromocaoTipoOferta", null)
                        .WithMany("ArtigoBrinde")
                        .HasForeignKey("PromocaoTipoOfertaId1");

                    b.Navigation("Produto");

                    b.Navigation("PromocaoTipoOferta");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Produtos.Deposito", b =>
                {
                    b.HasOne("AxisCommerce.Domain.Entities.Loja.Lojas", "Loja")
                        .WithMany("Depositos")
                        .HasForeignKey("LojaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Loja");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Produtos.Estoque", b =>
                {
                    b.HasOne("AxisCommerce.Domain.Entities.Produtos.Deposito", "Deposito")
                        .WithMany()
                        .HasForeignKey("DepositoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AxisCommerce.Domain.Entities.Produtos.Produto", "Produto")
                        .WithMany("Estoques")
                        .HasForeignKey("ProdutoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Deposito");

                    b.Navigation("Produto");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Produtos.Produto", b =>
                {
                    b.HasOne("AxisCommerce.Domain.Entities.Produtos.UnidadeMedida", "UnidadeMedida")
                        .WithMany("Produtos")
                        .HasForeignKey("UnidadeMedidaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UnidadeMedida");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Produtos.ProdutoAtributo", b =>
                {
                    b.HasOne("AxisCommerce.Domain.Entities.Produtos.ProdutoAtributoDefinicao", "ProdutoAtributoDefinicao")
                        .WithMany()
                        .HasForeignKey("ProdutoAtributoDefinicaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProdutoAtributoDefinicao");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Produtos.ProdutoCatalogo", b =>
                {
                    b.HasOne("AxisCommerce.Domain.Entities.Produtos.ProdutoAtributo", "ProdutoAtributo")
                        .WithMany("ProdutoCatalogos")
                        .HasForeignKey("ProdutoAtributoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AxisCommerce.Domain.Entities.Produtos.Produto", "Produto")
                        .WithMany("ProdutoCatalogos")
                        .HasForeignKey("ProdutoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Produto");

                    b.Navigation("ProdutoAtributo");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Produtos.ProdutoCodigoBarra", b =>
                {
                    b.HasOne("AxisCommerce.Domain.Entities.Produtos.Produto", "Produto")
                        .WithMany("ProdutoCodigoBarra")
                        .HasForeignKey("ProdutoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Produto");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Produtos.ProdutoCorBasica", b =>
                {
                    b.HasOne("AxisCommerce.Domain.Entities.Produtos.ProdutoAtributo", "ProdutoAtributo")
                        .WithMany("ProdutoCorBasica")
                        .HasForeignKey("ProdutoAtributoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AxisCommerce.Domain.Entities.Produtos.Produto", "Produto")
                        .WithMany("ProdutoCorBasica")
                        .HasForeignKey("ProdutoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Produto");

                    b.Navigation("ProdutoAtributo");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Produtos.ProdutoKit", b =>
                {
                    b.HasOne("AxisCommerce.Domain.Entities.Produtos.Kit", "Kit")
                        .WithMany()
                        .HasForeignKey("KitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AxisCommerce.Domain.Entities.Produtos.Kit", null)
                        .WithMany("ProdutoKits")
                        .HasForeignKey("KitId1");

                    b.HasOne("AxisCommerce.Domain.Entities.Produtos.Produto", "Produto")
                        .WithMany("ProdutoKits")
                        .HasForeignKey("ProdutoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Kit");

                    b.Navigation("Produto");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Produtos.ProdutoLookComposicao", b =>
                {
                    b.HasOne("AxisCommerce.Domain.Entities.Produtos.ProdutoAtributo", "ProdutoAtributo")
                        .WithMany("ProdutoLookComposicoes")
                        .HasForeignKey("ProdutoAtributoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AxisCommerce.Domain.Entities.Produtos.Produto", "Produto")
                        .WithMany("ProdutoLookComposicoes")
                        .HasForeignKey("ProdutoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Produto");

                    b.Navigation("ProdutoAtributo");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Produtos.ProdutoPreco", b =>
                {
                    b.HasOne("AxisCommerce.Domain.Entities.Produtos.Produto", "Produto")
                        .WithMany("ProdutoPreco")
                        .HasForeignKey("ProdutoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Produto");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Produtos.ProdutoTributo", b =>
                {
                    b.HasOne("AxisCommerce.Domain.Entities.Produtos.Produto", "Produto")
                        .WithMany("ProdutoTributo")
                        .HasForeignKey("ProdutoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Produto");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Vendas.OperacaoVendaCondicaoPgto", b =>
                {
                    b.HasOne("AxisCommerce.Domain.Entities.Pagamento.CondicaoPagto", null)
                        .WithMany("OperacaoVendaCondicaoPgtos")
                        .HasForeignKey("CondicaoPagtoId");

                    b.HasOne("AxisCommerce.Domain.Entities.Pagamento.CondicaoPagto", "CondicaoPgto")
                        .WithMany()
                        .HasForeignKey("CondicaoPgtoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AxisCommerce.Domain.Entities.Vendas.OperacaoVenda", "OperacaoVenda")
                        .WithMany()
                        .HasForeignKey("OperacaoVendaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AxisCommerce.Domain.Entities.Vendas.OperacaoVenda", null)
                        .WithMany("OperacaoVendaCondicaoPgtos")
                        .HasForeignKey("OperacaoVendaId1");

                    b.Navigation("CondicaoPgto");

                    b.Navigation("OperacaoVenda");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Vendas.OperacaoVendaTipoCliente", b =>
                {
                    b.HasOne("AxisCommerce.Domain.Entities.Clientes.ClienteTipo", "ClienteTipo")
                        .WithMany()
                        .HasForeignKey("ClienteTipoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AxisCommerce.Domain.Entities.Clientes.ClienteTipo", null)
                        .WithMany("OperacaoVendaTipoClientes")
                        .HasForeignKey("ClienteTipoId1");

                    b.HasOne("AxisCommerce.Domain.Entities.Vendas.OperacaoVenda", "OperacaoVenda")
                        .WithMany()
                        .HasForeignKey("OperacaoVendaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AxisCommerce.Domain.Entities.Vendas.OperacaoVenda", null)
                        .WithMany("OperacaoVendaTipoClientes")
                        .HasForeignKey("OperacaoVendaId1");

                    b.Navigation("ClienteTipo");

                    b.Navigation("OperacaoVenda");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Vendas.Promocao", b =>
                {
                    b.HasOne("AxisCommerce.Domain.Entities.Vendas.PromocaoGrupo", "PromocaoGrupo")
                        .WithMany()
                        .HasForeignKey("PromocaoGrupoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AxisCommerce.Domain.Entities.Vendas.PromocaoGrupo", null)
                        .WithMany("Promocao")
                        .HasForeignKey("PromocaoGrupoId1");

                    b.HasOne("AxisCommerce.Domain.Entities.Vendas.TipoOperacaoVenda", "TipoOperacaoVenda")
                        .WithMany()
                        .HasForeignKey("TipoOperacaoVendaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AxisCommerce.Domain.Entities.Vendas.TipoOperacaoVenda", null)
                        .WithMany("Promocao")
                        .HasForeignKey("TipoOperacaoVendaId1");

                    b.HasOne("AxisCommerce.Domain.Entities.Pagamento.TipoPagamento", "TipoPagamento")
                        .WithMany()
                        .HasForeignKey("TipoPagamentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AxisCommerce.Domain.Entities.Pagamento.TipoPagamento", null)
                        .WithMany("Promocoes")
                        .HasForeignKey("TipoPagamentoId1");

                    b.Navigation("PromocaoGrupo");

                    b.Navigation("TipoOperacaoVenda");

                    b.Navigation("TipoPagamento");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Vendas.PromocaoTipoOferta", b =>
                {
                    b.HasOne("AxisCommerce.Domain.Entities.Vendas.Promocao", "Promocao")
                        .WithMany()
                        .HasForeignKey("PromocaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AxisCommerce.Domain.Entities.Vendas.Promocao", null)
                        .WithMany("PromocaoTipoOferta")
                        .HasForeignKey("PromocaoId1");

                    b.HasOne("AxisCommerce.Domain.Entities.Vendas.TipoOferta", "TipoOferta")
                        .WithMany()
                        .HasForeignKey("TipoOfertaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AxisCommerce.Domain.Entities.Vendas.TipoOferta", null)
                        .WithMany("PromocaoTipoOferta")
                        .HasForeignKey("TipoOfertaId1");

                    b.Navigation("Promocao");

                    b.Navigation("TipoOferta");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Caixa.CaixaControle", b =>
                {
                    b.Navigation("CaixasFechamento");

                    b.Navigation("CaixasLancamento");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Caixa.CaixaLancamento", b =>
                {
                    b.Navigation("CaixasRecebimento");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Caixa.CaixaRecebimento", b =>
                {
                    b.Navigation("CaixasRecebimentoPgto");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Caixa.TipoLancamento", b =>
                {
                    b.Navigation("CaixasLancamento");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Clientes.Cliente", b =>
                {
                    b.Navigation("Pedidos");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Clientes.ClienteClassificacao", b =>
                {
                    b.Navigation("Clientes");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Clientes.ClienteEscolaridade", b =>
                {
                    b.Navigation("Clientes");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Clientes.ClienteFaixaRenda", b =>
                {
                    b.Navigation("Clientes");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Clientes.ClienteProfissao", b =>
                {
                    b.Navigation("Clientes");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Clientes.ClienteSubTipo", b =>
                {
                    b.Navigation("Clientes");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Clientes.ClienteTipo", b =>
                {
                    b.Navigation("ClienteSubTipos");

                    b.Navigation("OperacaoVendaTipoClientes");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Loja.Lojas", b =>
                {
                    b.Navigation("Depositos");

                    b.Navigation("LojaControle");

                    b.Navigation("Pedidos");

                    b.Navigation("Terminais");

                    b.Navigation("Vendedores");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Loja.Terminal", b =>
                {
                    b.Navigation("CaixasControle");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Loja.Transportadora", b =>
                {
                    b.Navigation("PedidoEntregas");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Loja.Vendedor", b =>
                {
                    b.Navigation("CaixasControle");

                    b.Navigation("CaixasRecebimento");

                    b.Navigation("PedidoDescontos");

                    b.Navigation("PedidoVendedor");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Pagamento.AdminCartao", b =>
                {
                    b.Navigation("CaixasRecebimentoPgto");

                    b.Navigation("CondicaoPagtoParcelas");

                    b.Navigation("CondicaoPagtos");

                    b.Navigation("PedidoPagos");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Pagamento.CondicaoPagto", b =>
                {
                    b.Navigation("CondicaoPagtoParcelas");

                    b.Navigation("OperacaoVendaCondicaoPgtos");

                    b.Navigation("PedidoPagos");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Pagamento.CredenciadoraCartao", b =>
                {
                    b.Navigation("AdminsCartao");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Pagamento.MoedaIndicador", b =>
                {
                    b.Navigation("CaixasRecebimento");

                    b.Navigation("CaixasRecebimentoPgto");

                    b.Navigation("PedidoPagos");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Pagamento.TipoPagamento", b =>
                {
                    b.Navigation("CaixasLancamento");

                    b.Navigation("CaixasRecebimentoPgto");

                    b.Navigation("CondicaoPagtoParcelas");

                    b.Navigation("CondicaoPagtos");

                    b.Navigation("PedidoPagos");

                    b.Navigation("Promocoes");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Pedidos.MotivoCancelamento", b =>
                {
                    b.Navigation("PedidoItens");

                    b.Navigation("Pedidos");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Pedidos.MotivoDesconto", b =>
                {
                    b.Navigation("PedidoDescontos");

                    b.Navigation("PedidoItens");

                    b.Navigation("Pedidos");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Pedidos.MotivoDevolucao", b =>
                {
                    b.Navigation("PedidoItens");

                    b.Navigation("Pedidos");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Pedidos.Pedido", b =>
                {
                    b.Navigation("PedidoDescontos");

                    b.Navigation("PedidoEntregas");

                    b.Navigation("PedidoItens");

                    b.Navigation("PedidoPagos");

                    b.Navigation("PedidoPromocoes");

                    b.Navigation("PedidoVendedor");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Pedidos.PedidoItem", b =>
                {
                    b.Navigation("PedidoDescontos");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Pedidos.PedidoPagto", b =>
                {
                    b.Navigation("PedidoDescontos");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Pedidos.PedidoPromocao", b =>
                {
                    b.Navigation("PedidoDescontos");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Pedidos.TipoPedido", b =>
                {
                    b.Navigation("Pedidos");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Produtos.Estoque", b =>
                {
                    b.Navigation("PedidoItens");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Produtos.Kit", b =>
                {
                    b.Navigation("ProdutoKits");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Produtos.Produto", b =>
                {
                    b.Navigation("ArtigoBrinde");

                    b.Navigation("Estoques");

                    b.Navigation("PedidoItens");

                    b.Navigation("ProdutoCatalogos");

                    b.Navigation("ProdutoCodigoBarra");

                    b.Navigation("ProdutoCorBasica");

                    b.Navigation("ProdutoKits");

                    b.Navigation("ProdutoLookComposicoes");

                    b.Navigation("ProdutoPreco");

                    b.Navigation("ProdutoTributo");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Produtos.ProdutoAtributo", b =>
                {
                    b.Navigation("ProdutoCatalogos");

                    b.Navigation("ProdutoCorBasica");

                    b.Navigation("ProdutoLookComposicoes");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Produtos.ProdutoCodigoBarra", b =>
                {
                    b.Navigation("PedidoItens");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Produtos.ProdutoPreco", b =>
                {
                    b.Navigation("PedidoItens");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Produtos.UnidadeMedida", b =>
                {
                    b.Navigation("Produtos");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Vendas.OperacaoVenda", b =>
                {
                    b.Navigation("OperacaoVendaCondicaoPgtos");

                    b.Navigation("OperacaoVendaTipoClientes");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Vendas.Promocao", b =>
                {
                    b.Navigation("PromocaoTipoOferta");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Vendas.PromocaoGrupo", b =>
                {
                    b.Navigation("Promocao");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Vendas.PromocaoTipoOferta", b =>
                {
                    b.Navigation("ArtigoBrinde");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Vendas.TipoOferta", b =>
                {
                    b.Navigation("PromocaoTipoOferta");
                });

            modelBuilder.Entity("AxisCommerce.Domain.Entities.Vendas.TipoOperacaoVenda", b =>
                {
                    b.Navigation("Promocao");
                });
#pragma warning restore 612, 618
        }
    }
}
